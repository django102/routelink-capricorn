version: "3.8"

services:
  sql-server:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      SA_PASSWORD: "Password10$"
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
    volumes:
      - sql-data:/var/opt/mssql
    healthcheck:
      test:
        [
          "CMD",
          "/opt/mssql-tools/bin/sqlcmd",
          "-U",
          "sa",
          "-P",
          "Password10$",
          "-Q",
          "SELECT 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - capricorn-network

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - capricorn-network

  redis:
    image: redis/redis-stack:latest
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - capricorn-network

  transaction-service:
    build:
      context: .
      dockerfile: .docker/transaction-service/Dockerfile
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__SqlServer=Server=sql-server;Database=RouteLink;User Id=sa;Password=Password10$;
      - MongoDbSettings__ConnectionString=mongodb://mongodb:27017
      - MongoDbSettings__DatabaseName=TransactionLogsDB
      - MongoDbSettings__LogsCollectionName=TransactionLogs
      - CapricornApi__BaseUrl=${CAPRICORN_API_BASE_URL}
      - CapricornApi__ApiKey=${CAPRICORN_API_KEY}
      - Jwt__Key=${JWT_SECRET_KEY}
      - Jwt__Issuer=CapricornFinancialIntegration
      - Jwt__Audience=TransactionService
    depends_on:
      sql-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy

    networks:
      - capricorn-network

  account-service:
    build:
      context: .
      dockerfile: .docker/account-service/Dockerfile
    ports:
      - "5001:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__SqlServer=Server=sql-server;Database=RouteLink;User Id=sa;Password=Password10$;
      - Jwt__Key=${JWT_SECRET_KEY}
      - Jwt__Issuer=CapricornFinancialIntegration
      - Jwt__Audience=AccountService
    depends_on:
      sql-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy

    networks:
      - capricorn-network

  logging-service:
    build:
      context: .
      dockerfile: .docker/logging-service/Dockerfile
    ports:
      - "5002:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - MongoDbSettings__ConnectionString=mongodb://mongodb:27017
      - MongoDbSettings__DatabaseName=LoggingDB
      - MongoDbSettings__LogsCollectionName=ApiLogs
    depends_on:
      sql-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - capricorn-network

  fraud-detection-service:
    build:
      context: .
      dockerfile: .docker/fraud-detection-service/Dockerfile
    ports:
      - "5002:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - MongoDbSettings__ConnectionString=mongodb://mongodb:27017
      - MongoDbSettings__DatabaseName=LoggingDB
      - MongoDbSettings__LogsCollectionName=ApiLogs
    depends_on:
      sql-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - capricorn-network

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - transaction-service
      - account-service
      - logging-service
      - fraud-detection-service

  grafana:
    image: grafana/grafana
    ports:
      - "4000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  sql-data:
  mongo-data:
  redis-data:
  grafana-storage:

networks:
  capricorn-network:
    driver: bridge
